services:
  compensations-db:
    container_name: 'compensations-db'
    image: postgres:14.2-alpine
    profiles: ['MockForDevelopment', 'db-only']
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: compensations-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 10005:5432
    networks:
      - compensations-network

  compensations-api:
    container_name: 'compensations-api'
    profiles: ['MockForDevelopment']
    build:
      context: .
      dockerfile: Api/Dockerfile
    ports:
      - 10006:80
    depends_on:
      compensations-db:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=MockForDevelopment
      - LOGS_PATH=/var/log/dev-compensations-api
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=postgres;Host=compensations-db;port=5432;Database=compensations-db
      - AuthenticationOptions__PublicSigningKey=MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAz+luHwhsNo4aQxYNCkaxcqL/HUcqWG1zz3pCpbyW5nbgxoo+Xw0jwAqVeRlrWHZf0WszbPObyCpmGVifyj6n0PSp5Np7431zjUhRUkxwyNSyVE5BWw5aJLyLB5EF9HH39CqtxdtWmYuLzhBS5fZT4tyR4xlQffNTxylg7xZgLfunUDRuLxdqR0JO3sjebgogrDVvHj3sif46uitipeTfUyCtqBG/JngPkMbDMNRkTH6QXnXfLgpX5Lr21O4PZPIBwCXzPCTCDMgbXHLvAzdlqgVYJcLf9xXPtVkPGOv8y+hbSTAyCNLViOLKKm2a2W4bPiElDIDwbtbHesj8zHPlpP5Q7QMtT168UxetgUeKsr5kfpxtLpE/QO4GkkqTA6rV7PQKrCTY0B5V8ZD8Ir/hlOKk8jxGe9NLui+8rLnnwJUZErT7Swp9yQL1eed2YtdrcR3q5eOE8+2pkzwjbEoFuIQidDKOghrZOwf6j217fme/xE+aEP0OPv5z07kJr2torh7tUefrVerT4Krj5LVl4DgdlkHAuILWOaYdSoLnRrsrfFa9Y1alM2D/juH9+YtaR/YjNWOhdZNMNyoDT08SbgE81ZbKmVgLGaWFLcMn/LBD6DBeRb5dRx12QZnv0jGJLVVgjTe9EqrjVF92ahGRljDIGjNzEI2f2syc0/qKS4sCAwEAAQ==
      - InnerCircleServiceUrls__EmployeeServiceUrl=http://employees-api:80/api
    networks:
      - compensations-network

  mockServer:
    container_name: 'mockServer'
    profiles: ["MockForPullRequest"]
    image: mockserver/mockserver:5.15.0
    command: -logLevel INFO
    ports:
      - 1080:1080
    volumes:
      - ./initializer.json:/config/initializer.json
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/initializer.json
    networks:
      - compensations-network

  karate-tests:
    container_name: 'karate-tests'
    profiles: ["MockForPullRequest"]
    build:
      dockerfile: KarateDockerfile
      context: .
    depends_on:
      - compensations-api
    command: ["karate", "/karate"]
    volumes:
      - .:/karate
    environment:
      AUTH_API_ROOT_URL: "http://mockServer:1080"
      API_ROOT_URL: "http://api"
      SHOULD_USE_FAKE_EXTERNAL_DEPENDENCIES: "true"
    networks:
      - compensations-network

  production-karate-tests:
    container_name: 'production-karate-tests'
    profiles: ["production-e2e-tests"]
    build:
      dockerfile: KarateDockerfile
      context: .
    command: ["karate", "/karate"]
    volumes:
      - .:/karate
    environment:
      AUTH_API_ROOT_URL: "https://innercircle.tourmalinecore.com/api"
      API_ROOT_URL: "https://innercircle.tourmalinecore.com"
      SHOULD_USE_FAKE_EXTERNAL_DEPENDENCIES: "false"
      AUTH_LOGIN: ${AUTH_LOGIN}
      AUTH_PASSWORD: ${AUTH_PASSWORD}

networks:
  compensations-network: {}
  ic-backend-deb:
    external: true
